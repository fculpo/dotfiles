---
- hosts: localhost

  vars_prompt:
    - name: "ansible_become_pass"
      prompt: "Sudo password"
      private: yes

  vars:
    ansible_python_interpreter: /usr/bin/python3
    pip_package: python3-pip
    make_threads: 4
    working_dir: /tmp
    check_version: 0.12.0
    rofi_version: 1.5.1

  tasks:
    - name: Ensure .local/bin is present
      file: name=$HOME/.local/bin state=directory

    - name: Ensure Aptitude is installed
      apt: name=aptitude state=present
      become: yes

    - name: Update all packages
      apt:  name=* state=latest
      become: yes

    - name: add libxrm-dev PPA
      apt_repository:
        repo: ppa:aguignard/ppa
      become: yes
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version < '16.10'

    - name: Install prerequisites
      apt: name={{ item }} state=present
      become: yes
      with_items:
        - zsh
        - rxvt-unicode
        - compton
        - feh
        - alsa-utils
        - lm-sensors
        - speedtest-cli
        - fonts-powerline
        - fonts-font-awesome
        - build-essential
        - libboost-all-dev
        - cmake
        - flex
        - bison
        - libdbus-1-dev
        - libx11-dev
        - libxinerama-dev
        - libxrandr-dev
        - libxss-dev
        - libglib2.0-dev
        - libpango1.0-dev
        - libgtk-3-dev
        - libxdg-basedir-dev
        - libxcb1-dev
        - libxcb-keysyms1-dev
        - libxcb-util0-dev
        - libxcb-icccm4-dev
        - libyajl-dev
        - libstartup-notification0-dev
        - libxcb-randr0-dev
        - libev-dev
        - libxcb-cursor-dev
        - libxcb-xinerama0-dev
        - libxcb-xkb-dev
        - libxkbcommon-dev
        - libxkbcommon-x11-dev
        - autoconf
        - libxcb-xrm-dev
        - automake
        - librsvg2-dev
        - libxcb-ewmh-dev

    - name: Install 16.10+ prerequisites
      apt: name=libxcb-xrm0
      become: yes
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '16.10'

    - name: Install Hack font
      apt: name=fonts-hack-ttf state=present
      become: yes

    - name: Check if i3-gaps is installed
      command: which i3
      changed_when: false
      register: result
      ignore_errors: yes

    - name: Install i3-gaps
      block:
        - git:
            repo: https://www.github.com/Airblader/i3
            dest: "{{ working_dir }}/i3-gaps"

        - command: autoreconf --force --install
          args:
            chdir: "{{ working_dir }}/i3-gaps"
            creates: "{{ working_dir }}/i3-gaps/Makefile.in"

        - file: name={{ working_dir }}/i3-gaps/build state=absent

        - file: name={{ working_dir }}/i3-gaps/build state=directory

        - command: ./configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
          args:
            chdir: "{{ working_dir }}/i3-gaps"
            creates: "{{ working_dir }}/i3-gaps/build/Makefile"

        - make:
            chdir: "{{ working_dir }}/i3-gaps/x86_64-pc-linux-gnu"

        - make:
            chdir: "{{ working_dir }}/i3-gaps/x86_64-pc-linux-gnu"
            target: install
          become: yes

        - file: name={{ working_dir }}/i3-gaps state=absent
      when: result is failed

    - name: Check if dunst is installed
      command: which dunst
      changed_when: false
      register: result
      ignore_errors: yes

    - name: Install dunst
      block:
        - git:
            repo: 'https://github.com/dunst-project/dunst.git'
            dest: "{{ working_dir }}/dunst"
        - make:
            chdir: "{{ working_dir }}/dunst"
        - make:
            chdir: "{{ working_dir }}/dunst"
            target: install
          become: yes
      when: result is failed

    - name: Check if check is installed
      stat: path=/usr/local/lib/libcheck.so.0.0.0
      register: result

    - name: "Install check {{ check_version }}"
      block:
        - name: Download check {{ check_version }}
          unarchive:
            src: https://github.com/libcheck/check/releases/download/{{ check_version }}/check-{{ check_version }}.tar.gz
            dest: "{{ working_dir }}"
            remote_src: yes
            creates: "{{ working_dir }}/check-{{ check_version }}/Makefile.am"

        - name: configure check
          command: ./configure
          args:
            chdir: "{{ working_dir }}/check-{{ check_version }}"
            creates: "{{ working_dir }}/check-{{ check_version }}/Makefile"

        - name: make check
          make:
            chdir: "{{ working_dir }}/check-{{ check_version }}"
            params:
              NUM_THREADS: make_threads

        - name: make install check
          make:
            target: install
            chdir: "{{ working_dir }}/check-{{ check_version }}"
          become: yes
      when: result.stat.exists == False

    - name: Check if rofi is installed
      command: which rofi
      changed_when: false
      register: result
      ignore_errors: yes

    - name: Install rofi {{ rofi_version }}
      block:
        - name: Download rofi {{ rofi_version }}
          unarchive:
            src: https://github.com/DaveDavenport/rofi/releases/download/{{ rofi_version }}/rofi-{{ rofi_version }}.tar.gz
            dest: "{{ working_dir }}"
            remote_src: yes
            creates: "{{ working_dir }}/rofi-{{ rofi_version }}/Makefile.am"

        - name: configure rofi
          command: ./configure
          args:
            chdir: "{{ working_dir }}/rofi-{{ rofi_version }}"
            creates: "{{ working_dir }}/rofi-{{ rofi_version }}/Makefile"

        - name: make rofi
          make:
            chdir: "{{ working_dir }}/rofi-{{ rofi_version }}"

        - name: make install rofi
          make:
            target: install
            chdir: "{{ working_dir }}/rofi-{{ rofi_version }}"
          become: yes
      when: result is failed

    - name: Check if rust is installed
      command: "ls $HOME/.cargo/bin/cargo"
      changed_when: false
      register: result
      ignore_errors: yes

    - name: Install Rust
      block:
        - name: fetch rustup installer
          get_url:
            url: https://sh.rustup.rs
            dest: "{{ working_dir }}"
            mode: "0755"

        - name: install rustup
          command: "{{ working_dir }}/rustup-init.sh -y"
      when: result is failed


    - name: check if i3status-rust is present
      command: "ls $HOME/.local/bin/i3status-rs"
      changed_when: false
      register: result
      ignore_errors: yes

    - name: Install i3-status-rust
      block:
        - name: Clone repo
          git:
            repo: https://github.com/greshake/i3status-rust.git
            dest: "{{ working_dir }}/i3status-rust"
        - name: Build i3-status-rust
          command: cargo build --release
          args:
            chdir: "{{ working_dir }}/i3status-rust"
            creates: "{{ working_dir }}/i3status-rust/target/release/i3status-rs"
        - name: move executable
          command: "cp {{ working_dir }}/i3status-rust/target/release/i3status-rs $HOME/.local/bin/"
          args:
            chdir: "{{ working_dir }}/i3status-rust"
            creates: "$HOME/.local/bin/i3status-rs"
      when: result is failed

